name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - test

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          sudo docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/opsdevimg:${{ github.ref_name }} .

      - name: Tag Docker image
        run: |
          sudo docker tag ${{ secrets.DOCKERHUB_USERNAME }}/opsdevimg:${{ github.ref_name }} ${{ secrets.DOCKERHUB_USERNAME }}/opsdev:${{ github.ref_name }}
      
      - name: Push Docker image to Docker Hub
        run: |
          sudo docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password ${{ secrets.DOCKERHUB_TOKEN }}
          sudo docker push ${{ secrets.DOCKERHUB_USERNAME }}/opsdev:${{ github.ref_name }}

  deploy-test:
    needs: build
    if: github.ref_name == 'test'
    runs-on: ubuntu-latest  
    steps:
      - name: Docker Login
        run: |
          sudo docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull and deploy Docker image to test
        env:
            PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
            HOST_NAME: ${{ secrets.TEST_EC2_IP }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ubuntu@${HOST_NAME} << 'EOF'
            # Stop and remove existing Docker containers and images
            sudo docker stop my-app-container || true
            sudo docker rm my-app-container || true
            sudo docker container prune -f
            sudo docker image prune -f

            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/opsdev:test
            sudo docker run -d -p 3000:3000 --name my-app-container ${{ secrets.DOCKERHUB_USERNAME }}/opsdev:test
          EOF

      - name: Set up Nginx for port forwarding
        env:
            PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
            HOST_NAME: ${{ secrets.TEST_EC2_IP }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ubuntu@${HOST_NAME} << 'EOF'
            echo "server {
                listen 80;
                server_name _;
    
                location / {
                    proxy_pass http://localhost:3000;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }" | sudo tee /etc/nginx/sites-available/default
    
            # Test Nginx configuration
            sudo nginx -t

            # Restart Nginx to apply the changes
            sudo systemctl restart nginx
          EOF

  deploy-prod:
    needs: build
    if: github.ref_name == 'master'
    runs-on: ubuntu-latest  
    steps:
      - name: Docker Login
        run: |
          sudo docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull and deploy Docker image to prod
        env:
            PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
            HOST_NAME: ${{ secrets.PROD_EC2_IP }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ubuntu@${HOST_NAME} << 'EOF'
            # Stop and remove existing Docker containers and images
            sudo docker stop my-app-container || true
            sudo docker rm my-app-container || true
            sudo docker container prune -f
            sudo docker image prune -f

            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/opsdev:master
            sudo docker run -d -p 3000:3000 --name my-app-container ${{ secrets.DOCKERHUB_USERNAME }}/opsdev:master
          EOF

      - name: Set up Nginx for port forwarding
        env:
            PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
            HOST_NAME: ${{ secrets.PROD_EC2_IP }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ubuntu@${HOST_NAME} << 'EOF'
            echo "server {
                listen 80;
                server_name _;
    
                location / {
                    proxy_pass http://localhost:3000;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }" | sudo tee /etc/nginx/sites-available/default
    
            # Test Nginx configuration
            sudo nginx -t

            # Restart Nginx to apply the changes
            sudo systemctl restart nginx
          EOF